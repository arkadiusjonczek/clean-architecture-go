// Code generated by MockGen. DO NOT EDIT.
// Source: basket_repository.go
//
// Generated by this command:
//
//	mockgen -source=basket_repository.go -destination=basket_repository_mock.go -package=basket
//

// Package basket is a generated GoMock package.
package basket

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBasketRepository is a mock of BasketRepository interface.
type MockBasketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBasketRepositoryMockRecorder
	isgomock struct{}
}

// MockBasketRepositoryMockRecorder is the mock recorder for MockBasketRepository.
type MockBasketRepositoryMockRecorder struct {
	mock *MockBasketRepository
}

// NewMockBasketRepository creates a new mock instance.
func NewMockBasketRepository(ctrl *gomock.Controller) *MockBasketRepository {
	mock := &MockBasketRepository{ctrl: ctrl}
	mock.recorder = &MockBasketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasketRepository) EXPECT() *MockBasketRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockBasketRepository) Find(id string) (*Basket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*Basket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockBasketRepositoryMockRecorder) Find(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBasketRepository)(nil).Find), id)
}

// FindByUserId mocks base method.
func (m *MockBasketRepository) FindByUserId(userId string) (*Basket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", userId)
	ret0, _ := ret[0].(*Basket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockBasketRepositoryMockRecorder) FindByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockBasketRepository)(nil).FindByUserId), userId)
}

// Save mocks base method.
func (m *MockBasketRepository) Save(basket *Basket) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", basket)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockBasketRepositoryMockRecorder) Save(basket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBasketRepository)(nil).Save), basket)
}
