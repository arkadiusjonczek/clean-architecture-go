// Code generated by MockGen. DO NOT EDIT.
// Source: product_price_simulator_service.go
//
// Generated by this command:
//
//	mockgen -source=product_price_simulator_service.go -destination=product_price_simulator_service_mock.go -package=helper
//

// Package helper is a generated GoMock package.
package helper

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProductPriceSimulatorService is a mock of ProductPriceSimulatorService interface.
type MockProductPriceSimulatorService struct {
	ctrl     *gomock.Controller
	recorder *MockProductPriceSimulatorServiceMockRecorder
	isgomock struct{}
}

// MockProductPriceSimulatorServiceMockRecorder is the mock recorder for MockProductPriceSimulatorService.
type MockProductPriceSimulatorServiceMockRecorder struct {
	mock *MockProductPriceSimulatorService
}

// NewMockProductPriceSimulatorService creates a new mock instance.
func NewMockProductPriceSimulatorService(ctrl *gomock.Controller) *MockProductPriceSimulatorService {
	mock := &MockProductPriceSimulatorService{ctrl: ctrl}
	mock.recorder = &MockProductPriceSimulatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductPriceSimulatorService) EXPECT() *MockProductPriceSimulatorServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockProductPriceSimulatorService) Execute() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute")
}

// Execute indicates an expected call of Execute.
func (mr *MockProductPriceSimulatorServiceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockProductPriceSimulatorService)(nil).Execute))
}
